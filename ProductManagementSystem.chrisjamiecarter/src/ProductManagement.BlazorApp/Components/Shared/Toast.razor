@inject IToastService ToastService

@implements IDisposable

@rendermode InteractiveServer

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="toast" class="toast @(IsVisible ? "show" : "")" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header @BackgroundCssClass">
            <div class="d-flex align-items-center me-3">
                <DynamicComponent Type="IconSvg" />
            </div>
            <strong class="me-auto">@Heading</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="HideToast"></button>
        </div>
        <div class="toast-body">
            @Message
        </div>
    </div>
</div>

@code {
    protected string Heading { get; set; } = "";

    protected string Message { get; set; } = "";

    protected bool IsVisible { get; set; }

    protected string BackgroundCssClass { get; set; } = "";

    protected Type IconSvg { get; set; } = typeof(InfoCircleFillSvg);

    protected override void OnInitialized()
    {
        if (ToastService is null)
        {
            throw new ArgumentNullException(nameof(ToastService));
        }

        ToastService.OnShow += ShowToast;
        ToastService.OnHide += HideToast;
    }

    private void BuildSettings(ToastLevel level, string message)
    {
        switch (level)
        {
            case ToastLevel.Info:
                BackgroundCssClass = "text-bg-info";
                IconSvg = typeof(InfoCircleFillSvg);
                Heading = "Info";
                break;
            case ToastLevel.Success:
                BackgroundCssClass = "text-bg-success";
                IconSvg = typeof(CheckCircleFillSvg);
                Heading = "Success";
                break;
            case ToastLevel.Warning:
                BackgroundCssClass = "text-bg-warning";
                IconSvg = typeof(ExclamationTriangleFillSvg);
                Heading = "Warning";
                break;
            case ToastLevel.Error:
                BackgroundCssClass = "text-bg-danger";
                IconSvg = typeof(ExclamationCircleFillSvg);
                Heading = "Error";
                break;
        }

        Message = message;
    }

    private void HideToast()
    {
        IsVisible = false;
        InvokeAsync(StateHasChanged);
    }

    private void ShowToast(string message, ToastLevel level)
    {
        BuildSettings(level, message);
        IsVisible = true;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (ToastService != null)
        {
            ToastService.OnShow -= ShowToast;
        }
        GC.SuppressFinalize(this);
    }
}
