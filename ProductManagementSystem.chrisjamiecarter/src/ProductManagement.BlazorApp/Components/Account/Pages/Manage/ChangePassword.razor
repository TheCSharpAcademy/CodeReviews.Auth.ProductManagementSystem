@inject ISenderService Sender

<section class="row mb-4">
    <div class="col-md-8 col-lg-6 col-xl-5">
        <h3 class="h3 mb-3 fw-normal">Change password</h3>
        <StatusMessage Status="@status" />
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="ChangePasswordAsync" OnInvalidSubmit="HandleInvalidSubmit" method="post" data-loading-button>
            <DataAnnotationsValidator />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.CurrentPassword" id="Input.CurrentPassword" class=@($"form-control {ValidationHelper.GetValidationCssClass(Input, nameof(Input.CurrentPassword), showValidation)}") autocomplete="current-password" aria-required="true" placeholder="Enter the old password" />
                <label for="Input.CurrentPassword" class="form-label">Current password</label>
                <ValidationMessage For="() => Input.CurrentPassword" class="invalid-feedback" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.UpdatedPassword" id="Input.UpdatedPassword" class=@($"form-control {ValidationHelper.GetValidationCssClass(Input, nameof(Input.UpdatedPassword), showValidation)}") autocomplete="new-password" aria-required="true" placeholder="Enter the new password" />
                <label for="Input.UpdatedPassword" class="form-label">New password</label>
                <ValidationMessage For="() => Input.UpdatedPassword" class="invalid-feedback" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class=@($"form-control {ValidationHelper.GetValidationCssClass(Input, nameof(Input.ConfirmPassword), showValidation)}") autocomplete="new-password" aria-required="true" placeholder="Enter the new password" />
                <label for="Input.ConfirmPassword" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="invalid-feedback" />
            </div>
            <button type="submit" class="btn btn-dark w-100">Update password</button>
        </EditForm>
    </div>
</section>

@code {
    private bool showValidation = false;
    private StatusModel status = StatusModel.None;

    [Parameter, EditorRequired]
    public ApplicationUserDto User { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-password")]
    private ChangePasswordInputModel Input { get; set; } = new();

    private async Task ChangePasswordAsync()
    {
        showValidation = false;
        status = new StatusModel(null, null);

        var command = new ChangePasswordCommand(User.Id, Input.CurrentPassword, Input.UpdatedPassword);
        var result = await Sender.SendAsync(command);
        if (result.IsFailure)
        {
            status = new StatusModel(result.Error.Message, MessageLevel.Error);
            return;
        }
        
        status = new StatusModel("Your password has been changed.", MessageLevel.Success);
    }

    private void HandleInvalidSubmit()
    {
        showValidation = true;
    }
}
