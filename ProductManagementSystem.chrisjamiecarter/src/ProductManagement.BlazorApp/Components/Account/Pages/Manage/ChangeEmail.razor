@inject ISenderService Sender

<section class="row mb-4">
    <div class="col-md-8 col-lg-6 col-xl-5">
        <h3 class="mb-3 fw-normal">Change email</h3>
        @if (Input is not null)
        {
            <StatusMessage Status="@status" />
            <EditForm Model="Input" FormName="change-email" OnValidSubmit="EditEmailAsync" OnInvalidSubmit="HandleInvalidSubmit" method="post" data-loading-button>
                <DataAnnotationsValidator />
                <div class="form-floating mb-3">
                    <input type="text" value="@User.Email" id="email" class="form-control" placeholder="Enter your email" disabled readonly />
                    <label for="email" class="form-label">Email</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.UpdatedEmail" id="Input.UpdatedEmail" class=@($"form-control {ValidationHelper.GetValidationCssClass(Input, nameof(Input.UpdatedEmail), showValidation)}") autocomplete="email" aria-required="true" placeholder="Enter a new email" />
                    <label for="Input.UpdatedEmail" class="form-label">New email</label>
                    <ValidationMessage For="() => Input.UpdatedEmail" class="invalid-feedback" />
                </div>
                <button class="btn btn-dark w-100" type="submit">Update email</button>
            </EditForm>
        }
    </div>
</section>

@code {
    private bool showValidation = false;
    private StatusModel status = StatusModel.None;

    [Parameter, EditorRequired]
    public ApplicationUserDto User { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private ChangeEmailInputModel Input { get; set; } = new();

    protected override void OnInitialized()
    {
        if (!string.IsNullOrWhiteSpace(User?.Email))
        {
            Input.UpdatedEmail ??= User.Email;
        }
    }

    private async Task EditEmailAsync()
    {
        showValidation = false;
        status = new StatusModel(null, null);

        if (Input.UpdatedEmail is null || Input.UpdatedEmail == User.Email)
        {
            status = new StatusModel("Your email is unchanged.", MessageLevel.Warning);
            return;
        }

        var command = new RequestEmailChangeConfirmationCommand(User.Id, Input.UpdatedEmail);
        var result = await Sender.SendAsync(command);
        if (result.IsFailure)
        {
            status = new StatusModel(result.Error.Message, MessageLevel.Error);
            return;
        }
        
        status = new StatusModel("Confirmation link to change email sent. Please check your email.", MessageLevel.Success);
    }

    private void HandleInvalidSubmit()
    {
        showValidation = true;
    }
}
