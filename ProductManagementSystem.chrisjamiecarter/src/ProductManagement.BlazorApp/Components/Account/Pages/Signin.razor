@page "/Account/Signin"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject ISenderService Sender
@inject IdentityRedirectManager RedirectManager

<PageTitle>Sign in</PageTitle>

<section class="d-flex w-100 h-100 p-3 mx-auto flex-column align-items-center">
    <div class="mt-auto mb-auto w-100 px-3">
        <div class="row d-flex flex-md-row-reverse justify-content-center align-items-center h-100 gap-2">
            <div class="col-md-9 col-lg-6 col-xl-5 offset-xl-1 d-flex justify-content-center">
                <img src="/img/product-management-system-logo-with-text.png" class="img-fluid p-5 overflow-hidden rounded-circle" alt="Application logo" />
            </div>
            <div class="col-md-8 col-lg-6 col-xl-5">
                <h1 class="h3 mb-3 fw-normal">Please sign in</h1>
                <StatusMessage Status="@status" />
                <EditForm Model="Input" method="post" OnValidSubmit="SignInUserAsync" OnInvalidSubmit="HandleInvalidSubmit" FormName="signin" data-loading-button>
                    <DataAnnotationsValidator />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" id="Input.Email" class=@($"form-control form-control-lg {ValidationHelper.GetValidationCssClass(Input, nameof(Input.Email), showValidation)}") autocomplete="email" aria-required="true" placeholder="name@example.com" />
                        <label for="Input.Email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="invalid-feedback" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class=@($"form-control form-control-lg {ValidationHelper.GetValidationCssClass(Input, nameof(Input.Password), showValidation)}") autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="Input.Password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="invalid-feedback" />
                    </div>
                    <div class="d-flex justify-content-between">
                        <div class="form-check mb-3">
                            <label class="form-check-label">
                                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input me-2" />
                                Remember me
                            </label>
                        </div>
                        <a class="link-dark small text-muted link-underline-opacity-0" href="Account/ForgotPassword">Forgot password?</a>
                    </div>
                    <div class="text-center text-lg-start">
                        <button type="submit" class="btn btn-dark btn-lg w-100 px-3">Sign in</button>
                        <div class="d-flex justify-content-between mt-3">
                            <a class="link-dark small text-muted link-underline-opacity-0" href="Account/Register">Don't have an account?</a>
                            <a class="link-dark small text-muted link-underline-opacity-0" href="Account/ResendEmailConfirmation">Resend email confirmation?</a>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    private bool showValidation = false;
    private StatusModel status = StatusModel.None;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private SignInUserInputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process.
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        var messageFromCookie = HttpContext.Request.Cookies[IdentityRedirectManager.StatusMessageCookieName];
        var levelFromCookie = HttpContext.Request.Cookies[IdentityRedirectManager.StatusLevelCookieName];
        if (!string.IsNullOrWhiteSpace(messageFromCookie) && !string.IsNullOrWhiteSpace(levelFromCookie))
        {
            status.Message = messageFromCookie;
            status.Level = Enum.Parse<MessageLevel>(levelFromCookie);
            HttpContext.Response.Cookies.Delete(IdentityRedirectManager.StatusMessageCookieName);
            HttpContext.Response.Cookies.Delete(IdentityRedirectManager.StatusLevelCookieName);
        }
    }

    public async Task SignInUserAsync()
    {
        showValidation = false;
        status = new StatusModel(null, null);

        var command = new SignInCommand(Input.Email, Input.Password, Input.RememberMe);
        var result = await Sender.SendAsync(command);
        if (result.IsFailure)
        {
            status = new StatusModel(result.Error.Message, MessageLevel.Error);
            return;
        }

        RedirectManager.RedirectTo(ReturnUrl);
    }

    private void HandleInvalidSubmit()
    {
        showValidation = true;
    }
}
