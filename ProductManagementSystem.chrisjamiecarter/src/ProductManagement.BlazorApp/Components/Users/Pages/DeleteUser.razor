@page "/users/delete/{Id}"

@inject ISenderService Sender
@inject IToastService ToastService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Delete User</PageTitle>

<div class="container-md py-3">

    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb mb-1">
            <li class="breadcrumb-item"><NavLink class="link-dark link-underline-opacity-0 link-underline-opacity-100-hover" href="users">Users</NavLink></li>
            <li class="breadcrumb-item active" aria-current="page">Delete</li>
        </ol>
    </nav>

    <div class="d-flex gap-3 align-items-center mb-4">
        <PersonFillXSvg Height="1.5rem" Width="1.5rem" />
        <h1 class="h2 mb-0">Delete User</h1>
    </div>

    @if (Input is null)
    {
        <LoadingSpinner />
    }
    else
    {
        <div class="form-group col-md-8 col-lg-6 col-xl-5">
            <EditForm Model="Input" FormName="DeleteUser" OnValidSubmit="ShowConfirmation">
                <div class="form-floating mb-3">
                    <InputText id="Input.Email" class="form-control" placeholder="name@example.com" disabled readonly @bind-Value="Input.Email" />
                    <label for="Input.Email" class="form-label">Email</label>
                </div>
                <div class="form-check form-switch mb-3">
                    <InputCheckbox id="Input.EmailConfirmed" class="form-check-input" disabled readonly @bind-Value="Input.EmailConfirmed" />
                    <label for="Input.EmailConfirmed" class="form-check-label">Email Confirmed</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText id="Input.Role" class="form-control" placeholder="role" disabled readonly @bind-Value="Input.Role" />
                    <label for="Input.Role" class="form-label">Role</label>
                </div>
                <div class="d-flex gap-1">
                    <LoadingButton Type="submit" IsProcessing="@isProcessing" CssClass="btn btn-outline-dark w-100">
                        Delete
                    </LoadingButton>
                    <NavLink class="btn btn-dark w-100" href="users" aria-label="Back to Users" title="Back to Users">
                        Back
                    </NavLink>
                </div>
            </EditForm>
        </div>

        @if (showConfirmationModal)
        {
            <ConfirmationModal Title="Delete this user?"
            Message="Do you really want to delete this user? This action cannot be undone."
            OnCancelCallback="HideConfirmation"
            OnConfirmCallback="DeleteUserAsync" />
        }
    }
</div>

@code {
    [Parameter] public string Id { get; set; } = string.Empty;

    private DeleteUserInputModel? Input { get; set; }
    
    private bool isProcessing = false;
    private bool showConfirmationModal { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadUserAsync();
        }
    }

    private async Task LoadUserAsync()
    {
        var query = new GetUserByIdQuery(Id);

        var response = await Sender.SendAsync(query);
        if (response.IsSuccess)
        {
            Input = new DeleteUserInputModel(response.Value);
        }
        else
        {
            ToastService.ShowToast(response.Error.Message, ToastLevel.Error);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteUserAsync()
    {
        if (Input is null)
        {
            return;
        }

        isProcessing = true;

        var command = new DeleteUserCommand(Input.Id);

        var response = await Sender.SendAsync(command);
        if (response.IsSuccess)
        {
            ToastService.ShowToast("User deleted", ToastLevel.Success);
            NavigationManager.NavigateTo("users");
        }
        else
        {
            ToastService.ShowToast(response.Error.Message, ToastLevel.Error);
            HideConfirmation();
        }

        isProcessing = false;
    }

    private void ShowConfirmation()
    {
        showConfirmationModal = true;
    }

    private void HideConfirmation()
    {
        showConfirmationModal = false;
    }
}
