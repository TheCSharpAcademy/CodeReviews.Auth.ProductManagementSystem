@page "/products/add"

@inject ISenderService Sender
@inject IToastService ToastService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Add Product</PageTitle>

<div class="container-md py-3">

    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb mb-1">
            <li class="breadcrumb-item"><NavLink class="link-dark link-underline-opacity-0 link-underline-opacity-100-hover" href="products">Products</NavLink></li>
            <li class="breadcrumb-item active" aria-current="page">Add</li>
        </ol>
    </nav>

    <div class="d-flex gap-3 align-items-center mb-4">
        <CartPlusFillSvg Height="1.5rem" Width="1.5rem" />
        <h1 class="h2 mb-0">Add New Product</h1>
    </div>

    @if (Input is null || EditContext is null)
    {
        <LoadingSpinner />
    }
    else
    {
        <div class="form-group col-md-8 col-lg-6 col-xl-5">
            <EditForm EditContext="EditContext" FormName="AddProduct" OnValidSubmit="AddProductAsync">
                <DataAnnotationsValidator />
                <div class="form-floating mb-3">
                    <InputText id="Input.Name" class=@($"form-control {EditContext?.GetValidationClass(() => Input.Name)}") placeholder="name" @bind-Value="Input.Name" />
                    <label for="Input.Name" class="form-label">Name</label>
                    <ValidationMessage For="() => Input.Name" class="invalid-feedback" />
                </div>
                <div class="form-floating mb-3">
                    <InputTextArea id="Input.Description" class=@($"form-control {EditContext?.GetValidationClass(() => Input.Description)}") placeholder="description" @bind-Value="Input.Description" />
                    <label for="Input.Description" class="form-label">Description</label>
                    <ValidationMessage For="() => Input.Description" class="invalid-feedback" />
                </div>
                <div class="form-floating mb-3">
                    <InputNumber id="Input.Price" class=@($"form-control {EditContext?.GetValidationClass(() => Input.Price)}") @bind-Value="Input.Price" />
                    <label for="Input.Price" class="form-label">Price</label>
                    <ValidationMessage For="() => Input.Price" class="invalid-feedback" />
                </div>
                <div class="d-flex gap-1">
                    <LoadingButton Type="submit" IsProcessing="@isProcessing" CssClass="btn btn-outline-dark w-100">
                        Create
                    </LoadingButton>
                    <NavLink class="btn btn-dark w-100" href="products" aria-label="Back to Products" title="Back to Products">
                        Back
                    </NavLink>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    private EditContext? EditContext { get; set; }
    private CreateProductInputModel Input { get; set; } = new();
    
    private bool isProcessing = false;

    protected override void OnInitialized()
    {
        EditContext ??= new EditContext(Input);
    }

    private async Task AddProductAsync()
    {
        isProcessing = true;

        var command = new CreateProductCommand(Input.Name,
                                               Input.Description,
                                               Input.Price);

        var response = await Sender.SendAsync(command);
        if (response.IsSuccess)
        {
            ToastService.ShowToast("Product created", ToastLevel.Success);
            NavigationManager.NavigateTo("products");
        }
        else
        {
            ToastService.ShowToast(response.Error.Message, ToastLevel.Error);
        }

        isProcessing = false;
    }
}
